se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( interval, c(i,i),col=color)
}
B <- 100
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( interval, c(i),col=color)
}
B <- 100
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( interval, c(1,1),col=color)
}
B <- 100
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(5,28), c(i,i),col=color)
}
B <- 100
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(28,5), c(i,i),col=color)
}
B <- 100
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(2,5), c(i,i),col=color)
}
B <- 100
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(22,25), c(i,i),col=color)
}
B <- 100
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(22:25), c(i,i),col=color)
}
B <- 100
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(2,13,24,35), c(i,2,13,35),col=color) ## lines() is draw a line between points
}
B <- 100
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(35,13,24,3), c(i,2,13,35),col=color) ## lines() is draw a line between points
}
B <- 10
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(35,13,24,3), c(i,2,13,35),col=color) ## lines() is draw a line between points
}
B <- 1
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(35,13,24,3), c(i,2,13,35),col=color) ## lines() is draw a line between points
}
B <- 1
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(30,13,24,3), c(i,2,13,30),col=color) ## lines() is draw a line between points
}
B <- 1
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(30,18,24,3), c(i,i,13,30),col=color) ## lines() is draw a line between points
}
B <- 1
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(30,18,24,1.4), c(i,i,1.3,30),col=color) ## lines() is draw a line between points
}
B <- 1
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(30,18,24,30), c(i,i,1.3,1.4),col=color) ## lines() is draw a line between points
}
B <- 100
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(30,18,24,30), c(i,i,1.3,i),col=color) ## lines() is draw a line between points
}
library(rafalib)
B <- 10
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(30,18,24,30), c(i,i,1.3,i),col=color) ## lines() is draw a line between points
}
B <- 10
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( interval, c(i,i),col=color) ## lines() is draw a line between points
}
library(rafalib)
mypar2()
library(GSE5859Subset)
data(GSE5859Subset) ##this loads the three tables
dim(geneExpression)
head(sampleInfo)
sampleInfo$group
head(geneExpression)
match(sampleInfo$filename,colnames(geneExpression))
head(geneExpressio)
head(geneExpression)
?match
match(sampleInfo$filename,colnames(geneExpression))
colnames(geneExpression)
sampleInfo$filename
dim(geneAnnotation)
head(geneAnnotation)
head(match(geneAnnotation$PROBEID,rownames(geneExpression)))
geneAnnotation$PROBEID
rownames(geneExpression)
library(rafalib)
library(GSE5859Subset)
g <- sampleInfo$group
g
e <- geneExpression[25,]
e
e1<- geneExpression[1,]
e1
head(geneExpression)
e1<- geneExpression[25,1]
e1
e<- geneExpression[25,]
e[g==1]
?qqnorm
mypar2(1,2)
qqnorm(e[g==1])
qqline(e[g==1])
qqnorm(e[g==0])
qqline(e[g==0])
t.test(e[g==1],e[g==0])
?apply
myttest <- function(x) t.test(x[g==1],x[g==0],var.equal=TRUE)$p.value
pvals <- apply(geneExpression,1,myttest)
sum(pvals<0.05)
source("http://www.bioconductor.org/biocLite.R")
biocLite("genefilter")
set.seed(1)
m <- nrow(geneExpression)
n <- ncol(geneExpression)
randomData <- matrix(rnorm(n*m),m,n)
randomData
nullpvals <- apply(randomData,1,myttest)
sum(nullpvals<0.05)
sum(pvals<0.05)
rnorm(n*m)
?rnorm
library(genefilter)
results <- rowttests(geneExpression,factor(g))
max(abs(pvals-results$p))
?bioclite
library(GSE5859Subset)
library(rafalib)
g <- sampleInfo$group
library(GSE5859Subset)
head(sampleInfo)
library(devtools)
install_github("genomicsclass/GSE5859Subset")
library(GSE5859Subset)
library(rafalib)
mypar2(
mypar2()
data(GSE5859Subset)
data(GSE5859Subset)
data(GSE5859Subset)
g <- factor(sampleInfo$group)
q
g
?rowttests
results <- rowttests(geneExpression,g)
library(genefilter)
?rowttests
results <- rowttests(geneExpression,g)
View(results)
View(results)
pvals <- results$p.value
View(results)
View(sampleInfo)
m <- nrow(geneExpression)
n <- ncol(geneExpression)
randomData <- matrix(rnorm(n*m),m,n)
nullpvals <- rowttests(randomData,g)$p.value
plot(results$dm,-log10(results$p.value),
xlab="Effect size",ylab="- log (base 10) p-values")
View(results)
plot(results$statistic,-log10(results$p.value),
xlab="Effect size",ylab="- log (base 10) p-values")
plot(results$dm,-log10(results$p.value),
xlab="Effect size",ylab="- log (base 10) p-values")
lines(,log10(0.05))
lines(-4:4,log10(0.05))
?lines
?abline
abline(h=log10(0.05))
log10(0.05)
abline(h=-log10(0.05))
setwd("~/Dropbox/Scripts/genomicClass/GenomeNote/lab/course1")
nullresults <- rowttests(randomData,g)
plot(results$dm,-log10(nullresults$p.value),
xlab="Effect size",ylab="- log (base 10) p-values")
abline(h=-log10(0.05))
mypar2(1,2)
plot(results$dm,-log10(results$p.value),
xlab="Effect size",ylab="- log (base 10) p-values")
abline(h=-log10(0.05))
plot(results$dm,-log10(nullresults$p.value),
xlab="Effect size",ylab="- log (base 10) p-values")
abline(h=-log10(0.05))
?plot
?mypar2
?mypar2
mypar2(1,2)
plot(results$dm,-log10(nullresults$p.value), xlim=c(0, 20),
xlab="Effect size",ylab="- log (base 10) p-values")
plot(results$dm,-log10(results$p.value), xlim=c(0, 5),
xlab="Effect size",ylab="- log (base 10) p-values", )
plot(results$dm,-log10(results$p.value), ylim=c(0, 20),
xlab="Effect size",ylab="- log (base 10) p-values", )
plot(results$dm,-log10(nullresults$p.value), ylim=c(0, 20),
xlab="Effect size",ylab="- log (base 10) p-values")
abline(h=-log10(0.05))
abline(h=-log10(0.05))
mypar2(1,2)
plot(results$dm,-log10(results$p.value), ylim=c(0, 20),
xlab="Effect size",ylab="- log (base 10) p-values", )
abline(h=-log10(0.05))
plot(results$dm,-log10(nullresults$p.value), ylim=c(0, 20),
xlab="Effect size",ylab="- log (base 10) p-values")
abline(h=-log10(0.05))
abline(h=-log10(0.01))
mypar2(1,2)
hist(nullpvals,ylim=c(0,1400))
hist(pvals,ylim=c(0,1400))
permg <- sample(g)
permresults <- rowttests(geneExpression,permg)
hist(permresults$p.value)
library(Biobase)
library(GSE5859)
data(GSE5859)
ge <- exprs(e)
ge <- exprs(geneExpression)
e
e <- geneExpression[25,]
ge <- exprs(e)
class(e)
data(GSE5859)
library(GSE5859)
library(Biobase)
library(GSE5859)
devtools::install_github("genomicsclass/GSE5859")
data(GSE5859)
library(GSE5859)
data(GSE5859)
class(e)
ge <- exprs(e)
ge[,49] <- ge[,49]/log2(exp(1)) ##immitate error
library(rafalib)
mypar2(1,1)
boxplot(ge,range=0,names=1:ncol(e),col=ifelse(1:ncol(ge)==49,1,2))
qs <- t(apply(ge,2,quantile,prob=c(0.05,0.25,0.5,0.75,0.95)))
matplot(qs,type="l",lty=1)
?t
?quantile
gsNoT <- apply(ge,2,quantile,prob=c(0.05,0.25,0.5,0.75,0.95))
View(gsNoT)
View(qs)
matplot(qs,type="l",lty=1)
