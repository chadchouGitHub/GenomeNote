treatment <- dat[treatmentIndex,2]
diff <- mean(treatment)-mean(control)
print(diff)
library(rafalib)
B <- 100
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( interval, c(i,i),col=color)
}
N <- 30
hf <- sample(chowPopulation,N)
library(downloader)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/mice_pheno.csv"
filename <- tempfile()
## This if() skip the {} for the download() function.
if (!file.exists(filename)) download(url,destfile=filename)
dat <- read.csv(filename)
chowPopulation <- dat[dat$Sex=="F" & dat$Diet=="chow",3]
library(rafalib)
B <- 100
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( interval, c(i,i),col=color)
}
N <- 30
hf <- sample(chowPopulation,N)
## Standard error (SE) is always small than standard diviation (SD).
se <- sd(hf)/sqrt(N) ## standard error
print(se)
pnorm(2)-pnorm(-2)
## pnorm() take quantiles of SD or SE and return probabilities
## qnorm() take probabilities and return quantiles of SD or SE.
Q <- qnorm(1- 0.05/2)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
interval
library(rafalib)
B <- 100
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( interval, c(i,i),col=color)
}
B <- 100
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
ablines( interval, c(i,i),col=color)
}
library(rafalib)
B <- 100
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
abline( interval, c(i,i),col=color)
}
library(rafalib)
B <- 100
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( interval, c(i,i),col=color)
}
B <- 100
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( interval, c(i),col=color)
}
B <- 100
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( interval, c(1,1),col=color)
}
B <- 100
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(5,28), c(i,i),col=color)
}
B <- 100
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(28,5), c(i,i),col=color)
}
B <- 100
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(2,5), c(i,i),col=color)
}
B <- 100
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(22,25), c(i,i),col=color)
}
B <- 100
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(22:25), c(i,i),col=color)
}
B <- 100
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(2,13,24,35), c(i,2,13,35),col=color) ## lines() is draw a line between points
}
B <- 100
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(35,13,24,3), c(i,2,13,35),col=color) ## lines() is draw a line between points
}
B <- 10
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(35,13,24,3), c(i,2,13,35),col=color) ## lines() is draw a line between points
}
B <- 1
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(35,13,24,3), c(i,2,13,35),col=color) ## lines() is draw a line between points
}
B <- 1
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(30,13,24,3), c(i,2,13,30),col=color) ## lines() is draw a line between points
}
B <- 1
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(30,18,24,3), c(i,i,13,30),col=color) ## lines() is draw a line between points
}
B <- 1
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(30,18,24,1.4), c(i,i,1.3,30),col=color) ## lines() is draw a line between points
}
B <- 1
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(30,18,24,30), c(i,i,1.3,1.4),col=color) ## lines() is draw a line between points
}
B <- 100
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(30,18,24,30), c(i,i,1.3,i),col=color) ## lines() is draw a line between points
}
library(rafalib)
B <- 10
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(30,18,24,30), c(i,i,1.3,i),col=color) ## lines() is draw a line between points
}
B <- 10
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( interval, c(i,i),col=color) ## lines() is draw a line between points
}
setwd("~/Dropbox/Scripts/genomicClass/GenomeNote/lab/course1")
library(downloader)
url<-"https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/babies.txt"
filename <- tempfile()
download(url,destfile="babies.txt")
dat <- read.table("babies.txt",header=TRUE)
smokers <- sample(dat$bwt[dat$smoke==1],10)
nonsmokers <- sample(dat$bwt[dat$smoke==0],10)
mean(smokers)-mean(nonsmokers)
for(i in 1:10) {
smokers <- sample(dat$bwt[dat$smoke==1],10)
nonsmokers <- sample(dat$bwt[dat$smoke==0],10)
cat("observed difference = ",mean(smokers)-mean(nonsmokers),"ounces\n")
}
head(dat)
ttestgenerator <- function(n) {
# note that here we have a false "smokers" group where we actually
# sample from the nonsmokers. this is because we are modeling the *null*
smokers = sample(dat$bwt[dat$smoke==0], n)
nonsmokers = sample(dat$bwt[dat$smoke==0], n)
return((mean(smokers)-mean(nonsmokers))/sqrt(var(smokers)/n + var(nonsmokers)/n))
}
ttests <- replicate(1000, ttestgenerator(10))
ttests
hist(ttests)
qqnorm(ttests)
abline(0,1)
?abline
abline(0,2)
abline(1,2)
abline(2,2)
abline(0,0)
abline(0,1.5)
abline(0,0.5)
abline(0,0.25)
abline(0,0.125)
abline(1,0.125)
ttests <- replicate(1000, ttestgenerator(3))
qqnorm(ttests)
abline(0,1)
qs <- (seq(0,999)+0.5)/1000
qqplot(qt(qs,df=2*3-2),ttests,xlim=c(-6,6),ylim=c(-6,6))
abline(0,1)
?qt
qs
qs <- (seq(0,999)+0.5)/1000
qqplot(qt(qs,df=4),ttests,xlim=c(-6,6),ylim=c(-6,6))
abline(0,1)
qs <- (seq(0,999)+0.5)/1000
qqplot(qt(qs,df=2*3-2),ttests,xlim=c(-6,6),ylim=c(-6,6))
abline(0,1)
