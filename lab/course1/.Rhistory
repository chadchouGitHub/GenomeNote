se <- sd(hf)/sqrt(N) ## standard error
print(se)
pnorm(2)-pnorm(-2)
## pnorm() take quantiles of SD or SE and return probabilities
## qnorm() take probabilities and return quantiles of SD or SE.
Q <- qnorm(1- 0.05/2)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
interval
library(rafalib)
B <- 100
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( interval, c(i,i),col=color)
}
B <- 100
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
ablines( interval, c(i,i),col=color)
}
library(rafalib)
B <- 100
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
abline( interval, c(i,i),col=color)
}
library(rafalib)
B <- 100
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( interval, c(i,i),col=color)
}
B <- 100
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( interval, c(i),col=color)
}
B <- 100
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( interval, c(1,1),col=color)
}
B <- 100
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(5,28), c(i,i),col=color)
}
B <- 100
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(28,5), c(i,i),col=color)
}
B <- 100
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(2,5), c(i,i),col=color)
}
B <- 100
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(22,25), c(i,i),col=color)
}
B <- 100
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(22:25), c(i,i),col=color)
}
B <- 100
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(2,13,24,35), c(i,2,13,35),col=color) ## lines() is draw a line between points
}
B <- 100
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(35,13,24,3), c(i,2,13,35),col=color) ## lines() is draw a line between points
}
B <- 10
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(35,13,24,3), c(i,2,13,35),col=color) ## lines() is draw a line between points
}
B <- 1
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(35,13,24,3), c(i,2,13,35),col=color) ## lines() is draw a line between points
}
B <- 1
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(30,13,24,3), c(i,2,13,30),col=color) ## lines() is draw a line between points
}
B <- 1
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(30,18,24,3), c(i,i,13,30),col=color) ## lines() is draw a line between points
}
B <- 1
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(30,18,24,1.4), c(i,i,1.3,30),col=color) ## lines() is draw a line between points
}
B <- 1
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(30,18,24,30), c(i,i,1.3,1.4),col=color) ## lines() is draw a line between points
}
B <- 100
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(30,18,24,30), c(i,i,1.3,i),col=color) ## lines() is draw a line between points
}
library(rafalib)
B <- 10
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(30,18,24,30), c(i,i,1.3,i),col=color) ## lines() is draw a line between points
}
B <- 10
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( interval, c(i,i),col=color) ## lines() is draw a line between points
}
library(rafalib)
mypar2()
library(GSE5859Subset)
data(GSE5859Subset) ##this loads the three tables
dim(geneExpression)
head(sampleInfo)
sampleInfo$group
head(geneExpression)
match(sampleInfo$filename,colnames(geneExpression))
head(geneExpressio)
head(geneExpression)
?match
match(sampleInfo$filename,colnames(geneExpression))
colnames(geneExpression)
sampleInfo$filename
dim(geneAnnotation)
head(geneAnnotation)
head(match(geneAnnotation$PROBEID,rownames(geneExpression)))
geneAnnotation$PROBEID
rownames(geneExpression)
library(rafalib)
library(GSE5859Subset)
g <- sampleInfo$group
g
e <- geneExpression[25,]
e
e1<- geneExpression[1,]
e1
head(geneExpression)
e1<- geneExpression[25,1]
e1
e<- geneExpression[25,]
e[g==1]
?qqnorm
mypar2(1,2)
qqnorm(e[g==1])
qqline(e[g==1])
qqnorm(e[g==0])
qqline(e[g==0])
t.test(e[g==1],e[g==0])
?apply
myttest <- function(x) t.test(x[g==1],x[g==0],var.equal=TRUE)$p.value
pvals <- apply(geneExpression,1,myttest)
sum(pvals<0.05)
source("http://www.bioconductor.org/biocLite.R")
biocLite("genefilter")
set.seed(1)
m <- nrow(geneExpression)
n <- ncol(geneExpression)
randomData <- matrix(rnorm(n*m),m,n)
randomData
nullpvals <- apply(randomData,1,myttest)
sum(nullpvals<0.05)
sum(pvals<0.05)
rnorm(n*m)
?rnorm
library(genefilter)
results <- rowttests(geneExpression,factor(g))
max(abs(pvals-results$p))
setwd("~/Dropbox/Scripts/genomicClass/GenomeNote/lab/course1")
install.packages("UsingR")
library(UsingR)
library(ggplot2)
install.packages("ggplot2")
library(UsingR)
?ggplot2
??ggplot2
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
detach("package:ggplot2", unload=TRUE)
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages(c("codetools", "colorspace", "manipulate"))
library(UsingR)
data("father.son")
x=father.son$fheight
y=father.son$sheight
plot(x,y,xlab="Father's height in inches",ylab="Son's height in inches",
main=paste("correlation =",signif(cor(x,y),2)))
?signif
plot(x,y,xlab="Father's height in inches",ylab="Son's height in inches",
main=paste("correlation =",signif(cor(x,y),3)))
signif(cor(x,y),2)))
plot(x,y,xlab="Father's height in inches",ylab="Son's height in inches",
main=paste("correlation =",signif(cor(x,y),2)))
plot(x,y,xlab="Father's height in inches",ylab="Son's height in inches",
main=paste("correlation =",scor(x,y)))
plot(x,y,xlab="Father's height in inches",ylab="Son's height in inches",
main=paste("correlation =",cor(x,y)))
data("father.son") ## A classic examples is the father/son height data used by Galton
x=father.son$fheight
y=father.son$sheight
plot(x,y,xlab="Father's height in inches",ylab="Son's height in inches",
main=paste("correlation =",signif(cor(x,y),2)))
?split
groups <- split(y,round(x))
groups
round(x)
boxplot(groups)
summary(round(x))
round(x) == 72
a <- y[ round(x) == 72]
a
b <- x[round(x)==72]
b
summary(b)
