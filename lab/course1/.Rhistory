for(i in 1:nrow(rNAStepData)){
if  (is.na(rNAStepData[i,1])){
date_i <- rNAStepData[i,2]
rNAStepData[i,1] <- meanSByDate[[as.factor(date_i)]]
}
}
head(rNAStepData)
splitnewDataByDate <- split(rNAStepData$steps, rNAStepData$date)
allnewDays <- as.Date(sort(unique(rNAStepData$date)), format = "%Y-%m-%d")
sumOfrNAStepByDate <- as.data.frame(sapply(splitnewDataByDate, sum))
names(sumOfrNAStepByDate) <- c("Steps")
png(filename='./figures/reNAEachDaySteps.png', width=480, height=480, units="px")
hist(sumOfrNAStepByDate$Steps, main="Total steps by day", xlab="Number of steps in each day", ylab="Number of days", col="red", breaks = nrow(sumOfrNAStepByDate))
dev.off()
rNAStepData$dateWeek <- weekdays(rNAStepData$date)
head(rNAStepData)
for(i in 1: nrow(rNAStepData)){
if(rNAStepData[i,4]=="Sunday" | rNAStepData[i,4]=="Saturday"){
rNAStepData[i,4] <- "Weekend"
}else{
rNAStepData[i,4] <- "Weekday"
}
}
head(rNAStepData)
head(rNAStepData,20)
head(rNAStepData,200:250)
head(rNAStepData,200)
head(rNAStepData,2000)
weekDaySplit <- split(rNAStepData, rNAStepData$dateWeek)
weekendData <- weekDaySplit[["Weekend"]]
weekdayData <- weekDaySplit[["Weekday"]]
head(weekendData)
weInterval <- unique(sort(weekendData$interval))
splitweekendDataIntervals <- split(weekendData$steps, weInterval)
meanSplitweekendDataIntervals <- as.data.frame(sapply(splitweekendDataIntervals, mean))
names(meanSplitweekendDataIntervals) <- "meanSteps"
wEMatrixValues <- as.data.frame(cbind(meanSplitweekendDataIntervals$meanSteps, weInterval, "Weekend"))
names(wEMatrixValues) <- c("meanSteps", "interval", "weekdate")
wdInterval <- unique(sort(weekdayData$interval))
splitweekdayDataIntervals <- split(weekdayData$steps, wdInterval)
meanSplitweekdayDataIntervals <- as.data.frame(sapply(splitweekdayDataIntervals, mean))
names(meanSplitweekdayDataIntervals) <- "meanSteps"
wDMatrixValues <- as.data.frame(cbind(meanSplitweekdayDataIntervals$meanSteps, wdInterval, "Weekday"))
names(wDMatrixValues) <- c("meanSteps", "interval", "weekdate")
meanStepMatrix <- as.data.frame(rbind(wDMatrixValues,wEMatrixValues))
meanStepMatrix$meanSteps <- as.numeric(as.character(meanStepMatrix$meanSteps))
meanStepMatrix$interval <- as.numeric(as.character(meanStepMatrix$interval))
library("lattice")
fig<- xyplot(meanStepMatrix$meanSteps ~ meanStepMatrix$interval | meanStepMatrix$weekdate, meanStepMatrix, layout=c(1,2), type="l", xlab="Interval", ylab="Number of steps")
print(p)
png(filename = ./figures/weekedNweekday.png', width=480, height=480, units="px")
print(fig)
dev.off()
library("lattice")
fig<- xyplot(meanStepMatrix$meanSteps ~ meanStepMatrix$interval | meanStepMatrix$weekdate, meanStepMatrix, layout=c(1,2), type="l", xlab="Interval", ylab="Number of steps")
png(filename = ./figures/weekedNweekday.png', width=480, height=480, units="px")
print(fig)
dev.off()
install.packages("ggplot2")
?befile
?bzfile
StormData <- read.csv(filename)
filename <- "repdata-data-StormData.csv.bz2"
if (!file.exists("repdata-data-StormData")) {
fileurl <- "http://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
download.file(fileurl, filename, "auto")
}
StormData <- read.csv(filename)
str(stormData)
str(StormData)
str(StormData)
str(StormData)
head(StormData)
StormData$PROPDMGEXP <- sub('K',1000, StormData$PROPDMGEXP)
StormData$PROPDMGEXP <- sub('M',1000000, StormData$PROPDMGEXP)
StormData$PROPDMGEXP <- sub('B',1000000000, StormData$PROPDMGEXP)
StormData$PROPDMGEXP <- sub('m',1000000, StormData$PROPDMGEXP)
StormData$PROPDMGEXP <- sub('m',1000000, StormData$PROPDMGEXP)
StormData$PROPDMGEXP <- sub('B',1000000000,StormData$PROPDMGEXP)
StormData$PROPDMGEXP <- sub('M',1000000, StormData$PROPDMGEXP)
StormData$PROPDMGEXP <- sub('K',1000, StormData$PROPDMGEXP)
StormData$PROPDMGEXP <- sub('k',1000, StormData$PROPDMGEXP)
StormData$PROPDMGEXP <- sub('K',1000, StormData$PROPDMGEXP)
StormData$PROPDMGEXP <- sub('M',1000000, StormData$PROPDMGEXP)
StormData$PROPDMGEXP <- sub('B',1000000000, StormData$PROPDMGEXP)
StormData$PROPDMGEXP <- sub('m',1000000, StormData$PROPDMGEXP)
StormData$CROPDMGEXP <- sub('m',1000000, StormData$CROPDMGEXP)
StormData$CROPDMGEXP <- sub('B',1000000000,StormData$CROPDMGEXP)
StormData$CROPDMGEXP <- sub('M',1000000, StormData$CROPDMGEXP)
StormData$CROPDMGEXP <- sub('K',1000, StormData$CROPDMGEXP)
StormData$CROPDMGEXP <- sub('k',1000, StormData$CROPDMGEXP)
head(StormData)
StormData$PROPDMGEXP <- as.numeric(StormData$PROPDMGEXP)
StormData$CROPDMGEXP <- as.numeric(StormData$CROPDMGEXP)
StormData$CROPDMGEXP[is.na(StormData$CROPDMGEXP)] <- 1
StormData$PROPDMGEXP[is.na(StormData$PROPDMGEXP)] <- 1
StormData$PROPDMG <- StormData$PROPDMG * StormData$PROPDMGEXP
StormData$CPROPDMG <-StormData$CROPDMG * storm_data$CROPDMGEXP
StormData$CPROPDMG <-StormData$CROPDMG * StormData$CROPDMGEXP
sub_data1 <- aggregate(PROPDMG+CROPDMG~EVTYPE, data = StormData,mean)
sub_data1
sub_data1 <- sub_data1[order(sub_data1$'PROPDMG + CROPDMG', decreasing = T),]
sub_data1
DAMdata <- aggregate(PROPDMG+CROPDMG~EVTYPE, data = StormData,mean)
DAMdata <- DAMdata1[order(DAMdata$'PROPDMG + CROPDMG', decreasing = T),]
DAMdata <- DAMdata[order(DAMdata$'PROPDMG + CROPDMG', decreasing = T),]
FIdata <- aggregate(FATALITIES+INJURIES~EVTYPE, data = StormData,mean)
FIdata <- FIdata[order(FIdata$'FATALITIES + INJURIES', decreasing = T),]
Top20DAM <- head(DAMdata, 20)
Top20FI<- head(FIdata, 20)
row.names(Top20DAM) <- 1:20
row.names(Top20FI) <- 1:20
barplot(Top20FI$'FATALITIES + INJURIES',names.arg = 1:20, xlab = 'Event Type', ylab='Avg Fatalities and Injuries', main='Top 20 Events by Avg Fatalities and Injuries')
legend('topright',paste(rownames(sub_data), toupper(sub_data$EVTYPE), sep = " "), cex=.8)
barplot(Top20FI$'FATALITIES + INJURIES',names.arg = 1:20, xlab = 'Event Type', ylab='Avg Fatalities and Injuries', main='Top 20 Events by Avg Fatalities and Injuries')
legend('topright',paste(rownames(Top20FI), toupper(Top20FI$EVTYPE), sep = " "), cex=.8)
barplot(Top20FI$'FATALITIES + INJURIES',names.arg = 1:20, xlab = 'Event Type', ylab='Avg Fatalities and Injuries', main='Top 20 Events by Avg Fatalities and Injuries')
legend('topright',paste(rownames(Top20FI), toupper(Top20FI$EVTYPE), sep = " "), cex=.4)
barplot(Top20FI$'FATALITIES + INJURIES',names.arg = 1:20, xlab = 'Event Type', ylab='Avg Fatalities and Injuries', main='Top 20 Events by Avg Fatalities and Injuries')
legend('topright',paste(rownames(Top20FI), toupper(Top20FI$EVTYPE), sep = " "), cex=.2)
barplot(Top20DAM$'PROPDMG + CROPDMG',names.arg = 1:20, xlab = 'Event Type', ylab='Avg Property and Crop Damage($)', main='Top 20 Events by Avg Property and Crop Damage')
legend('topright',paste(rownames(Top20DAM), toupper(Top20DAM$EVTYPE), sep = " "), cex=.2)
?barplot
barplot(Top20DAM$'PROPDMG + CROPDMG',names.arg = 1:20, xlab = 'Event Type', ylab='Avg Property and Crop Damage($)', main='Top 20 Events by Avg Property and Crop Damage')
barplot(Top20DAM$'PROPDMG + CROPDMG',col="red",names.arg = 1:20, xlab = 'Event Type', ylab='Avg Property and Crop Damage($)', main='Top 20 Events by Avg Property and Crop Damage')
Top20DAM
?read.csv
```{r}
BNN <- read.csv("BNNTest.csv")
summary(BNN)
BNN <- read.csv("BNNTest.csv")
summary(BNN)
head(BNN)
?plot
BNN <- read.csv("BNNTest.csv")
summary(BNN)
head(BNN)
plot(BNN)
?read.csv
?plot
?rexp
hats <- rexp(40, rate=0.2)
hats
nosim <- 1000
n<-40
lambda<-0.2
mean(apply(matrix(rexp(nosim*n, lambda), ncol=n), 1, mean))
1/lambda
nosim <- 1000
n<-40
lambda<-0.2
sd(apply(matrix(rexp(nosim*n, lambda), ncol=n), 1, mean))^2
(1/lambda)^2/n
g
library(data.table)
nosim <- 1000
n<-40
lambda<-0.2
df<-data.table(average=apply(matrix(rexp(nosim*n, lambda), ncol=n), 1, mean))
library(data.table)
nosim <- 1000
n<-40
lambda<-0.2
df<-data.table(average=apply(matrix(rexp(nosim*n, lambda), ncol=n), 1, mean))
install.packages(c("class", "cluster", "codetools", "formatR", "htmltools", "KernSmooth", "labeling", "markdown", "MASS", "mgcv", "rmarkdown"))
?data.table
install.packages("data.table")
library(data.table)
nosim <- 1000
n<-40
lambda<-0.2
df<-data.table(average=apply(matrix(rexp(nosim*n, lambda), ncol=n), 1, mean))
library(ggplot2)
g <- ggplot(df, aes(x = average)) + labs(title = paste('miu = ', 1/lambda))
g <- g + geom_histogram(fill = "salmon",binwidth=0.1, aes(y = ..density..), colour = "black")
g <- g + geom_density(size = 1) + geom_vline(xintercept = 1/lambda, size =1)
g
?aes
library(data.table)
nosim <- 1000
n<-40
lambda<-0.2
df<-data.table(avg=apply(matrix(rexp(nosim*n, lambda), ncol=n), 1, mean))
library(ggplot2)
g <- ggplot(df, aes(x = avg)) + labs(title = paste('miu = ', 1/lambda))
g
g <- g + geom_histogram(fill = "blue",binwidth=0.1, aes(y = ..density..), colour = "black")
g
g <- g + geom_density(size = 1) + geom_vline(xintercept = 1/lambda, size =1)
g
library(ggplot2)
g <- ggplot(df, aes(x = avg)) + labs(title = paste('miu = ', 1/lambda))
g <- g + geom_density(size = 1) + geom_vline(xintercept = 1/lambda, size =1)
g
library(data.table)
nosim <- 1000
n<-40
lambda<-0.2
df<-data.table(avg=apply(matrix(rexp(nosim*n, lambda), ncol=n), 1, mean))
library(ggplot2)
g <- ggplot(df, aes(x = avg)) + labs(title = paste('miu = ', 1/lambda))
g
g <- g + geom_histogram(fill = "salmon",binwidth=0.1, aes(y = ..density..), colour = "black")
g
g <- g + geom_density(size = 1) + geom_vline(xintercept = 1/lambda, size =1)
g
library(data.table)
nosim <- 1000
n<-40
lambda<-0.2
df<-data.table(avg=apply(matrix(rexp(nosim*n, lambda), ncol=n), 1, mean))
library(ggplot2)
g <- ggplot(df, aes(x = avg)) + labs(title = paste('miu = ', 1/lambda))
g <- g + geom_histogram(fill = "blue",binwidth=0.1, aes(y = ..density..), colour = "black")
g <- g + geom_density(size = 1) + geom_vline(xintercept = 1/lambda, size =1)
g
library(data.table)
nosim <- 2000
n<-40
lambda<-0.2
df<-data.table(avg=apply(matrix(rexp(nosim*n, lambda), ncol=n), 1, mean))
library(ggplot2)
g <- ggplot(df, aes(x = avg)) + labs(title = paste('miu = ', 1/lambda))
g <- g + geom_histogram(fill = "blue",binwidth=0.1, aes(y = ..density..), colour = "black")
g <- g + geom_density(size = 1) + geom_vline(xintercept = 1/lambda, size =1)
g
?seq
lambdavals <- seq(0.05, 2.0, by = 0.05)
nosim <- 1000
myLambcov<-function(lambda) {
xhats<-matrix(rexp(nosim*n, lambda), ncol=n)
miu<-apply(xhats, 1, mean)
S<-apply(xhats, 1, sd)
ll <- miu - 1.96*S/sqrt(n)
ul <- miu + 1.96*S/sqrt(n)
mean(ll < 1/lambda & ul > 1/lambda)
}
n<-40; coverage40 <- sapply(lambdavals, myLambcov )
n<-400; coverage400 <- sapply(lambdavals, myLambcov)
dat<-rbind(data.frame(sno=40,lambdavals,coverage=coverage40),data.frame(sno=400,lambdavals,coverage=coverage400))
library(ggplot2)
g <- ggplot()
g <- g + geom_line(data=data.frame(lambdavals,coverage40), aes(x=lambdavals,y=coverage40,color="40"),size=1)
g <- g + geom_line(data=data.frame(lambdavals,coverage400), aes(x=lambdavals,y=coverage400,color="400"),size=1)
g <- g + scale_colour_manual("# of samples",values = c("40" = "red","400" = "blue"))
g <- g + geom_hline(yintercept = 0.95)
g <- g + coord_cartesian(ylim = c(0.85,1))
g
nosim <- 2000
n<-40
lambda<-0.2
mean(apply(matrix(rexp(nosim*n, lambda), ncol=n), 1, mean))
1/lambda
library(data.table)
nosim <- 2000
n<-40
lambda<-0.2
df<-data.table(avg=apply(matrix(rexp(nosim*n, lambda), ncol=n), 1, mean))
library(ggplot2)
g <- ggplot(df, aes(x = avg)) + labs(title = paste('miu = ', 1/lambda))
g <- g + geom_histogram(fill = "blue",binwidth=0.1, aes(y = ..density..), colour = "black")
g <- g + geom_density(size = 1) + geom_vline(xintercept = 1/lambda, size =1)
g
h
H
data(ToothGrowth)
plot(ToothGrowth)
library(ggplot2)
g <- ggplot(data=ToothGrowth, aes(x=dose, y=len, color=supp))
g + geom_point() + geom_smooth(method="lm")
?ToothGrowth
?summary
summary(ToothGrowth)
g_VC<-ToothGrowth[ToothGrowth$supp=="VC","len"]
g_OJ<-ToothGrowth[ToothGrowth$supp=="OJ","len"]
diff=g_OJ - g_VC
mean(diff)
tt<-t.test(diff,mu=3); tt
qt(0.975,29)
t1 <- t.test(len ~ supp, paired=FALSE, var.equal=FALSE, data=ToothGrowth)
t1
str(ToothGrowth)
t2 <- t.test(len ~ dose, paired=FALSE, var.equal=FALSE, data=ToothGrowth)
t2 <- t.test(len ~ supp, paired=FALSE, var.equal=FALSE, data=toothDose20)
toothDose20 <- ToothGrowth[ToothGrowth$dose==2.0,]
t2 <- t.test(len ~ supp, paired=FALSE, var.equal=FALSE, data=toothDose20)
t2
toothDose10 <- ToothGrowth[ToothGrowth$dose==1.0,]
t10 <- t.test(len ~ supp, paired=FALSE, var.equal=FALSE, data=toothDose10)
t10
toothDose05 <- ToothGrowth[ToothGrowth$dose==0.5,]
t05 <- t.test(len ~ supp, paired=FALSE, var.equal=FALSE, data=toothDose05)
t05
library(UsingR); data(galton)
par(mfrow=c(1,2))
hist(galton$child,col="blue",breaks=100)
hist(galton$parent,col="blue",breaks=100)
library(manipulate)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
plot(galton$parent,galton$child,pch=19,col="blue")
freqData
freqData <- as.data.frame(table(galton$child, galton$parent))
freqData
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
plot(as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent", ylab = "child")
?table
a <- table(galton$child, galton$parent)
a
freq <- as.data.frame(a)
freq
hist(galton$child,col="blue",breaks=100)
meanChild <- mean(galton$child)
lines(rep(meanChild,100),seq(0,150,length=100),col="red",lwd=5)
plot(galton$parent,galton$child,pch=19,col="blue")
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
plot(as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent", ylab = "child")
myPlot <- function(beta){
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent",
ylab = "child"
)
abline(0, beta, lwd = 3)
points(0, 0, cex = 2, pch = 19)
mse <- mean( (y - beta * x)^2 )
title(paste("beta = ", beta, "mse = ", round(mse, 3)))
}
}
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
lm(I(child - mean(child))~ I(parent - mean(parent)) - 1, data = galton)
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
plot(as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .05 * freqData$freq,
xlab = "parent", ylab = "child")
lm1 <- lm(galton$child ~ galton$parent)
lines(galton$parent,lm1$fitted,col="red",lwd=3)
lm1
str(lm1)
lm1$fitted
data(mtcars)
summary(mtcars)
data(mtcars)
summary(mtcars)
?mtcars
carsData <- mtcars
carsData$am <- as.factor(carsData$am)
str(carsData$am)
summary(carsData$mpg[carsData$am==0])
summary(carsData$mpg[carsData$am==1])
summary(carsData$mpg[carsData$am==0])
summary(carsData$mpg[carsData$am==1])
t.test(carsData$mpg[carsData$am==0], carsData$mpg[carsData$am==1])
linearModelFit <- lm(mpg ~ am, data=carsData)
summary(linearModelFit)
boxplot(mpg ~ am, data=mtcars, main = "Boxplot transmission vs mpg", names = c("automatic", "manual")
boxplot(mpg ~ am, data=carsData, main = "Boxplot transmission vs mpg", names = c("automatic", "manual")
boxplot(mpg ~ am, data=carsData, main = "Boxplot transmission vs mpg", names = c("automatic", "manual")
boxplot(mpg ~ am, data=carsData, main = "Boxplot transmission vs mpg", names = c("automatic", "manual")
carsData <- mtcars
carsData$am <- as.factor(carsData$am)
str(carsData$am)
boxplot(mpg ~ am, data=carsData, main = "Boxplot transmission vs mpg", names = c("automatic", "manual")
boxplot(mpg ~ am, data=mtcars, main = "Boxplot transmission vs mpg", names = c("automatic", "manual")
?boxplot
boxplot(mpg ~ am, data=carsData, main = "Boxplot transmission vs mpg" , names = c("automatic", "manual")
boxplot(mpg ~ am, data=mtcars, main = "Boxplot transmission vs mpg", names = c("automatic", "manual")
boxplot(mpg ~ am, data=carsData, main = "Boxplot transmission vs mpg", names = c("automatic", "manual")
boxplot(mpg ~ am, data=carsData)
boxplot(mpg ~ am, data=carsData)
autocar <- carsData$mpg[carsData$am==0]
manucar <- carsData$mpg[carsData$am==1]
plot (autocar)
autocar
autocar <- carsData[carsData$am==0]
manucar <- carsData[carsData$am==1]
autocar <- carsData[carsData$am==0,]
manucar <- carsData[carsData$am==1,]
autocar
plot(autocar)
plot (manucar)
?mtcars
linearModel<- lm(mpg ~ am, data=carsData)
linearModel<- lm(mpg ~ am, data=carsData)
linearModel
linearModel<- lm(mpg ~ am, data=carsData)
summary(linearModel)
autocar <- carsData[carsData$am==0,]
manucar <- carsData[carsData$am==1,]
lMauto<- lm(mpg ~ wt, data=autocar)
lMmun <- lm(mpg ~ wt, data=manucar)
summary(lMauto)
summary(lMmun)
install.packages("swirl")
library(swirl)
swirl()
plot(child~parent, galton)
plot(jitter(child,4)~ parent,galton)
regrline <- lm(child~parent, galton)
abline(regrline,lwd=3,col='red')
summary(regrline)
?train
?train
(Need to install e1071 package.)
library(caret)
?train
install.packages("shiny")
setwd("~/DataProductAssignment")
shiny::runApp()
?numericalInput
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd("~/")
shiny::runApp('DataProductAssignment')
shiny::runApp('DataProductAssignment')
library(shinyapps)
shinyapps::deployApp('~/DataProductAssignment')
shiny::runApp('DataProductAssignment')
shiny::runApp('DataProductAssignment')
shiny::runApp('DataProductAssignment')
shiny::runApp('DataProductAssignment')
shiny::runApp('DataProductAssignment')
library(shinyapps)
shinyapps::deployApp('~/DataProductAssignment')
date: 12/21/2014
First Slide
German Type2 Diabetes Score
========================================================
author: Chia-Ching Chou
date: 12/21/2014
First Slide
========================================================
For more details on authoring R presentations click the
**Help** button on the toolbar.
- Bullet 1
- Bullet 2
- Bullet 3
Slide With Code
========================================================
```{r}
summary(cars)
```
Slide With Plot
========================================================
```{r, echo=FALSE}
plot(cars)
```
summary(cars)
plot(cars)
plot(cars)
plot(cars)
source('~/.active-rstudio-document', echo=TRUE)
More -> Save As Web Page
Save As Web Page <- More
install_github('slidify', 'ramnathv')
install.packages("slidifyLibraries")
setwd("~/Documents")
myplasmid = read.table("pXRT1.xdna")
fileName <- 'pXRT1.xdna'
myplasmid<- readChar(fileName, file.info(fileName)$size)
?read.dna
library(devtools)
install_github("genomicsclass/dagdata")
getwd()
setwd("~/Dropbox/Scripts/genomicClass/lab")
setwd("~/Dropbox/Scripts/genomicClass/lab/course1")
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/femaleMiceWeights.csv"
filename <- tempfile()
download.file(url,destfile=filename,method="curl")
dat <- read.csv(filename)
head(dat)
dir <- system.file(package="dagdata")
list.files(dir)
?system.file
dir
