lambda<-0.2
df<-data.table(avg=apply(matrix(rexp(nosim*n, lambda), ncol=n), 1, mean))
library(ggplot2)
g <- ggplot(df, aes(x = avg)) + labs(title = paste('miu = ', 1/lambda))
g <- g + geom_histogram(fill = "blue",binwidth=0.1, aes(y = ..density..), colour = "black")
g <- g + geom_density(size = 1) + geom_vline(xintercept = 1/lambda, size =1)
g
?seq
lambdavals <- seq(0.05, 2.0, by = 0.05)
nosim <- 1000
myLambcov<-function(lambda) {
xhats<-matrix(rexp(nosim*n, lambda), ncol=n)
miu<-apply(xhats, 1, mean)
S<-apply(xhats, 1, sd)
ll <- miu - 1.96*S/sqrt(n)
ul <- miu + 1.96*S/sqrt(n)
mean(ll < 1/lambda & ul > 1/lambda)
}
n<-40; coverage40 <- sapply(lambdavals, myLambcov )
n<-400; coverage400 <- sapply(lambdavals, myLambcov)
dat<-rbind(data.frame(sno=40,lambdavals,coverage=coverage40),data.frame(sno=400,lambdavals,coverage=coverage400))
library(ggplot2)
g <- ggplot()
g <- g + geom_line(data=data.frame(lambdavals,coverage40), aes(x=lambdavals,y=coverage40,color="40"),size=1)
g <- g + geom_line(data=data.frame(lambdavals,coverage400), aes(x=lambdavals,y=coverage400,color="400"),size=1)
g <- g + scale_colour_manual("# of samples",values = c("40" = "red","400" = "blue"))
g <- g + geom_hline(yintercept = 0.95)
g <- g + coord_cartesian(ylim = c(0.85,1))
g
nosim <- 2000
n<-40
lambda<-0.2
mean(apply(matrix(rexp(nosim*n, lambda), ncol=n), 1, mean))
1/lambda
library(data.table)
nosim <- 2000
n<-40
lambda<-0.2
df<-data.table(avg=apply(matrix(rexp(nosim*n, lambda), ncol=n), 1, mean))
library(ggplot2)
g <- ggplot(df, aes(x = avg)) + labs(title = paste('miu = ', 1/lambda))
g <- g + geom_histogram(fill = "blue",binwidth=0.1, aes(y = ..density..), colour = "black")
g <- g + geom_density(size = 1) + geom_vline(xintercept = 1/lambda, size =1)
g
h
H
data(ToothGrowth)
plot(ToothGrowth)
library(ggplot2)
g <- ggplot(data=ToothGrowth, aes(x=dose, y=len, color=supp))
g + geom_point() + geom_smooth(method="lm")
?ToothGrowth
?summary
summary(ToothGrowth)
g_VC<-ToothGrowth[ToothGrowth$supp=="VC","len"]
g_OJ<-ToothGrowth[ToothGrowth$supp=="OJ","len"]
diff=g_OJ - g_VC
mean(diff)
tt<-t.test(diff,mu=3); tt
qt(0.975,29)
t1 <- t.test(len ~ supp, paired=FALSE, var.equal=FALSE, data=ToothGrowth)
t1
str(ToothGrowth)
t2 <- t.test(len ~ dose, paired=FALSE, var.equal=FALSE, data=ToothGrowth)
t2 <- t.test(len ~ supp, paired=FALSE, var.equal=FALSE, data=toothDose20)
toothDose20 <- ToothGrowth[ToothGrowth$dose==2.0,]
t2 <- t.test(len ~ supp, paired=FALSE, var.equal=FALSE, data=toothDose20)
t2
toothDose10 <- ToothGrowth[ToothGrowth$dose==1.0,]
t10 <- t.test(len ~ supp, paired=FALSE, var.equal=FALSE, data=toothDose10)
t10
toothDose05 <- ToothGrowth[ToothGrowth$dose==0.5,]
t05 <- t.test(len ~ supp, paired=FALSE, var.equal=FALSE, data=toothDose05)
t05
library(UsingR); data(galton)
par(mfrow=c(1,2))
hist(galton$child,col="blue",breaks=100)
hist(galton$parent,col="blue",breaks=100)
library(manipulate)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
plot(galton$parent,galton$child,pch=19,col="blue")
freqData
freqData <- as.data.frame(table(galton$child, galton$parent))
freqData
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
plot(as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent", ylab = "child")
?table
a <- table(galton$child, galton$parent)
a
freq <- as.data.frame(a)
freq
hist(galton$child,col="blue",breaks=100)
meanChild <- mean(galton$child)
lines(rep(meanChild,100),seq(0,150,length=100),col="red",lwd=5)
plot(galton$parent,galton$child,pch=19,col="blue")
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
plot(as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent", ylab = "child")
myPlot <- function(beta){
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent",
ylab = "child"
)
abline(0, beta, lwd = 3)
points(0, 0, cex = 2, pch = 19)
mse <- mean( (y - beta * x)^2 )
title(paste("beta = ", beta, "mse = ", round(mse, 3)))
}
}
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
lm(I(child - mean(child))~ I(parent - mean(parent)) - 1, data = galton)
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
plot(as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .05 * freqData$freq,
xlab = "parent", ylab = "child")
lm1 <- lm(galton$child ~ galton$parent)
lines(galton$parent,lm1$fitted,col="red",lwd=3)
lm1
str(lm1)
lm1$fitted
data(mtcars)
summary(mtcars)
data(mtcars)
summary(mtcars)
?mtcars
carsData <- mtcars
carsData$am <- as.factor(carsData$am)
str(carsData$am)
summary(carsData$mpg[carsData$am==0])
summary(carsData$mpg[carsData$am==1])
summary(carsData$mpg[carsData$am==0])
summary(carsData$mpg[carsData$am==1])
t.test(carsData$mpg[carsData$am==0], carsData$mpg[carsData$am==1])
linearModelFit <- lm(mpg ~ am, data=carsData)
summary(linearModelFit)
boxplot(mpg ~ am, data=mtcars, main = "Boxplot transmission vs mpg", names = c("automatic", "manual")
boxplot(mpg ~ am, data=carsData, main = "Boxplot transmission vs mpg", names = c("automatic", "manual")
boxplot(mpg ~ am, data=carsData, main = "Boxplot transmission vs mpg", names = c("automatic", "manual")
boxplot(mpg ~ am, data=carsData, main = "Boxplot transmission vs mpg", names = c("automatic", "manual")
carsData <- mtcars
carsData$am <- as.factor(carsData$am)
str(carsData$am)
boxplot(mpg ~ am, data=carsData, main = "Boxplot transmission vs mpg", names = c("automatic", "manual")
boxplot(mpg ~ am, data=mtcars, main = "Boxplot transmission vs mpg", names = c("automatic", "manual")
?boxplot
boxplot(mpg ~ am, data=carsData, main = "Boxplot transmission vs mpg" , names = c("automatic", "manual")
boxplot(mpg ~ am, data=mtcars, main = "Boxplot transmission vs mpg", names = c("automatic", "manual")
boxplot(mpg ~ am, data=carsData, main = "Boxplot transmission vs mpg", names = c("automatic", "manual")
boxplot(mpg ~ am, data=carsData)
boxplot(mpg ~ am, data=carsData)
autocar <- carsData$mpg[carsData$am==0]
manucar <- carsData$mpg[carsData$am==1]
plot (autocar)
autocar
autocar <- carsData[carsData$am==0]
manucar <- carsData[carsData$am==1]
autocar <- carsData[carsData$am==0,]
manucar <- carsData[carsData$am==1,]
autocar
plot(autocar)
plot (manucar)
?mtcars
linearModel<- lm(mpg ~ am, data=carsData)
linearModel<- lm(mpg ~ am, data=carsData)
linearModel
linearModel<- lm(mpg ~ am, data=carsData)
summary(linearModel)
autocar <- carsData[carsData$am==0,]
manucar <- carsData[carsData$am==1,]
lMauto<- lm(mpg ~ wt, data=autocar)
lMmun <- lm(mpg ~ wt, data=manucar)
summary(lMauto)
summary(lMmun)
install.packages("swirl")
library(swirl)
swirl()
plot(child~parent, galton)
plot(jitter(child,4)~ parent,galton)
regrline <- lm(child~parent, galton)
abline(regrline,lwd=3,col='red')
summary(regrline)
?train
?train
(Need to install e1071 package.)
library(caret)
?train
install.packages("shiny")
setwd("~/DataProductAssignment")
shiny::runApp()
?numericalInput
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd("~/")
shiny::runApp('DataProductAssignment')
shiny::runApp('DataProductAssignment')
library(shinyapps)
shinyapps::deployApp('~/DataProductAssignment')
shiny::runApp('DataProductAssignment')
shiny::runApp('DataProductAssignment')
shiny::runApp('DataProductAssignment')
shiny::runApp('DataProductAssignment')
shiny::runApp('DataProductAssignment')
library(shinyapps)
shinyapps::deployApp('~/DataProductAssignment')
date: 12/21/2014
First Slide
German Type2 Diabetes Score
========================================================
author: Chia-Ching Chou
date: 12/21/2014
First Slide
========================================================
For more details on authoring R presentations click the
**Help** button on the toolbar.
- Bullet 1
- Bullet 2
- Bullet 3
Slide With Code
========================================================
```{r}
summary(cars)
```
Slide With Plot
========================================================
```{r, echo=FALSE}
plot(cars)
```
summary(cars)
plot(cars)
plot(cars)
plot(cars)
source('~/.active-rstudio-document', echo=TRUE)
More -> Save As Web Page
Save As Web Page <- More
install_github('slidify', 'ramnathv')
install.packages("slidifyLibraries")
?data.frame
?factor
rats <- data.frame(
id = paste0("rat", 1:10),
sex = factor(rep(c("female", "male"),each = 5)),
weight = c(2, 4, 1, 11, 18, 12, 7, 12, 19, 20),
length = c(100,105, 115, 130, 95, 150, 165, 180, 190, 175)
)
rats
?paste0
?rep
summary(rats)
?summary
str(rats)
summary(rats$weight)
ratsTable <- data.frame(
id = paste0("rat", c(6, 9, 7, 3, 5, 1, 10, 4, 8, 2)),
secretID = 1:10
)
str(ratsTable)
ratsTable
match(ratsTable$id, rats$id)
rats
wrongDemo <- cbind(rats, ratsTable)
correctDemo <- cbind(rats[match(ratsTable$id, rats$id), ], ratsTable)
match(ratsTable$id, rats$id)
?match()
wrongDemo
correctDemo
?merge
ratsMerged <- merge(rats, ratsTable, by.x = "id", by.y = "id")
ratsMerged[order(ratsMerged$secretID), ]
ratsTable <- data.frame(
id = paste0("rat", c(6, 9, 7, 3, 5, 1, 11, 4, 8, 2)),
secretID = 1:10
)
wrongDemo <- cbind(rats, ratsTable)
wrongDemo
correctDemo <- cbind(rats[match(ratsTable$id, rats$id), ], ratsTable)
correctDemo
ratsMerged <- merge(rats, ratsTable, by.x = "id", by.y = "id")
ratsMerged[order(ratsMerged$secretID), ]
?%in%
1:10 %in% c(1,3,5,9)
str(%in%)
str("%in%")
?split
sp <- split(rats$weight, rats$sex)
sp
summary(sp)
length(sp)
length(sp[1])
f <- sp[1]
f
length(f)
f[2]
f[1]
f[1,1]
k<- split(f)
strsplit(f)
lapply(sp, mean)
?tapply
tapply(rats$weight, rats$sex, mean)
library(dplyr)
install.packages("dplyr")
library(dplyr)
?filter
?setequal
?%.%
sexes <- group_by(rats, sex)
summarise(sexes, ave = mean(weight))
rats %.% group_by(sex) %.% summarise(ave = mean(weight))
library(devtools)
library(rafalib)
?install_github
install_github('rafalib','ririzarr')
library(rafalib)
mypar
?mypar
shist(rnorm(100))
library(downloader)
install.packages("downloader")
library(downloader)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/mice_pheno.csv"
filename <- tempfile()
download(url,destfile=filename)
dat <- read.csv(filename)
?tempfile
dat
controlPopulation <- dat[dat$Sex == "F" & dat$Diet == "chow", 3]
length(controlPopulation)
controlPopulation2 <- dat[dat$Sex == "F" & dat$Diet == "chow", ]
hfPopulation <- dat[dat$Sex == "F" & dat$Diet == "hf", 3]
length(hfPopulation)
?pnorm
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/femaleControlsPopulation.csv"
filename <- tempfile()
download.file(url,destfile=filename,method="curl")
population <- read.csv(filename)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/femaleControlsPopulation.csv"
filename <- tempfile()
download.file(url,destfile=filename,method="curl")
population <- read.csv(filename)
pnorm(2)
pnorm(-2)
1-pnorm(2)+pnorm(-2)
library(downloader)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/mice_pheno.csv"
filename <- tempfile()
download(url,destfile=filename)
dat <- read.csv(filename)
controlPopulation <- dat[dat$Sex=="F" & dat$Diet=="chow",3]
hfPopulation <- dat[dat$Sex=="F" & dat$Diet=="hf",3]
?tempfile
library(rafalib)
mypar2(1,2)
hist(hfPopulation)
hist(controlPopulation)
mypar2(1,2)
hist(hfPopulation)
hist(controlPopulation)
mypar2(1,2)
qqnorm(hfPopulation);qqline(hfPopulation)
qqnorm(controlPopulation);qqline(controlPopulation)
?qqnorm
library(downloader)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/femaleMiceWeights.csv"
filename <- tempfile()
download(url,destfile=filename)
dat <- read.csv(filename)
head(dat)
str(dat)
controlIndex <- which(dat$Diet=="chow")
treatmentIndex <- which(dat$Diet=="hf")
control <- dat[controlIndex,2]
treatment <- dat[treatmentIndex,2]
diff <- mean(treatment)-mean(control)
print(diff)
setwd("~/Dropbox/Scripts/genomicClass/GenomeNote/lab/course1")
library(downloader)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/mice_pheno.csv"
filename <- tempfile()
if (!file.exists(filename)) download(url,destfile=filename)
dat <- read.csv(filename)
chowPopulation <- dat[dat$Sex=="F" & dat$Diet=="chow",3]
library(downloader)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/mice_pheno.csv"
filename <- tempfile()
if (!file.exists(filename)) {
download(url,destfile=filename)
}
dat <- read.csv(filename)
chowPopulation <- dat[dat$Sex=="F" & dat$Diet=="chow",3]
library(downloader)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/mice_pheno.csv"
filename <- tempfile()
if (!file.exists(filename)) download(url,destfile=filename)
dat <- read.csv(filename)
chowPopulation <- dat[dat$Sex=="F" & dat$Diet=="chow",3]
mu_chow <- mean(chowPopulation)
print(mu_chow)
N <- 30
hf <- sample(chowPopulation,N)
se <- sd(hf)/sqrt(N)
print(se)
pnorm(2)-pnorm(-2)
pnorm(1)-pnorm(-1)
pnorm(2.75)-pnorm(-2.75)
pnorm(3)-pnorm(-3)
pnorm(2)-pnorm(-2)
Q <- qnorm(1- 0.05/2)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
interval
q
Q
?qnorm
B <- 250
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
color <- ifelse(covered,1,2)
lines( interval, c(i,i),col=color)
}
library(rafalib)
B <- 250
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
color <- ifelse(covered,1,2)
lines( interval, c(i,i),col=color)
}
color
B <- 5
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered)
color <- ifelse(covered,1,2)
print(color)
lines( interval, c(i,i),col=color)
}
B <- 100
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( interval, c(i,i),col=color)
}
?lines
