print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(30,18,24,1.4), c(i,i,1.3,30),col=color) ## lines() is draw a line between points
}
B <- 1
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(30,18,24,30), c(i,i,1.3,1.4),col=color) ## lines() is draw a line between points
}
B <- 100
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(30,18,24,30), c(i,i,1.3,i),col=color) ## lines() is draw a line between points
}
library(rafalib)
B <- 10
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(30,18,24,30), c(i,i,1.3,i),col=color) ## lines() is draw a line between points
}
B <- 10
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( interval, c(i,i),col=color) ## lines() is draw a line between points
}
library(rafalib)
mypar2()
library(GSE5859Subset)
data(GSE5859Subset) ##this loads the three tables
dim(geneExpression)
head(sampleInfo)
sampleInfo$group
head(geneExpression)
match(sampleInfo$filename,colnames(geneExpression))
head(geneExpressio)
head(geneExpression)
?match
match(sampleInfo$filename,colnames(geneExpression))
colnames(geneExpression)
sampleInfo$filename
dim(geneAnnotation)
head(geneAnnotation)
head(match(geneAnnotation$PROBEID,rownames(geneExpression)))
geneAnnotation$PROBEID
rownames(geneExpression)
library(rafalib)
library(GSE5859Subset)
g <- sampleInfo$group
g
e <- geneExpression[25,]
e
e1<- geneExpression[1,]
e1
head(geneExpression)
e1<- geneExpression[25,1]
e1
e<- geneExpression[25,]
e[g==1]
?qqnorm
mypar2(1,2)
qqnorm(e[g==1])
qqline(e[g==1])
qqnorm(e[g==0])
qqline(e[g==0])
t.test(e[g==1],e[g==0])
?apply
myttest <- function(x) t.test(x[g==1],x[g==0],var.equal=TRUE)$p.value
pvals <- apply(geneExpression,1,myttest)
sum(pvals<0.05)
source("http://www.bioconductor.org/biocLite.R")
biocLite("genefilter")
set.seed(1)
m <- nrow(geneExpression)
n <- ncol(geneExpression)
randomData <- matrix(rnorm(n*m),m,n)
randomData
nullpvals <- apply(randomData,1,myttest)
sum(nullpvals<0.05)
sum(pvals<0.05)
rnorm(n*m)
?rnorm
library(genefilter)
results <- rowttests(geneExpression,factor(g))
max(abs(pvals-results$p))
triWx
triWx <- c("I am your")
triWx
splitTriWx <- split(triWx)
?split
splitTriWx <- strsplit(triWx, split, fixed=FALSE)
triWx <-as.string(c("I am your"))
triWx
triWx <-"I am your"
triWx
splitTriWx <- strsplit(triWx, split, fixed=FALSE)
splitTriWx <- strsplit(triWx, " ")
splitTriWx
splitTriWx[-1]
splitTriWx[length(splitTriWx)]
splitTrixWx[3]
splitTriWx[3]
splitTriWx[[3]]
splitTriWx
triWx <-c("I am your")
triWx
splitTriWx <- strsplit(triWx, " ")
splitTriWx
splitTriWx <- ulist(strsplit(triWx, " "))
splitTriWx <- unlist(strsplit(triWx, " "))
splitTriWx
splitTriWx[length(splitTriWx)]
triWx <-c("I am your father")
triWx
splitTriWx <- unlist(strsplit(triWx, " "))
splitTriWx[length(splitTriWx)]
lastWordF <- function(x){
splitTriWx <- unlist(strsplit(x, " "))
y<- splitTriWx[length(splitTriWx)]
return(y)
}
triWx <-c("I am your father")
triWx
lastWordF(triWx)
library(shiny)
runExample("03_reactivity")
runExample("04_mpg")
runExample("05_sliders")
runExample("06_tabsets")
runExample("07_widgets")
runExample("08_html")
runExample("09_upload")
runExample("10_download")
runExample("11_timer")
shiny::runApp('word-app')
- This Shiny App will take a input text and give out a word.
shiny::runApp('word-app')
shiny::runApp('word-app')
shiny::runApp('word-app')
shiny::runApp('word-app')
shiny::runApp('word-app')
runGitHub( "Wordapp", "chadchouGitHub")
shiny::runApp('word-app2')
shiny::runApp('word-app2')
View(oneSorted)
shiny::runApp('word-app2')
shiny::runApp('word-app2')
shiny::runApp('word-app2')
install.packages(c("boot", "evaluate", "gtools", "jsonlite", "manipulate", "roxygen2"))
write.csv(triSorted, file = "triSorted.csv")
write.csv(twoSorted, file = "twoSorted.csv")
github.download = function(url) {
fname <- tempfile()
system(sprintf("curl -3 %s > %s", url, fname))
return(fname)
}
con2 <- url("https://github.com/chadchouGitHub/Wordapp/blob/master/data/twoSorted.csv")
twoSorted<- read.csv(github.download(con2))
library(downloader)
#con2 <- url("https://github.com/chadchouGitHub/Wordapp/blob/master/data/twoSorted.csv")
url <- "https://github.com/chadchouGitHub/Wordapp/blob/master/data/twoSorted.csv"
filename <- tempfile()
download(url,destfile=filename)
twoSorted <- read.csv("twoSorted.csv")
View(twoSorted)
library(downloader)
#con2 <- url("https://github.com/chadchouGitHub/Wordapp/blob/master/data/twoSorted.csv")
url <- "https://github.com/chadchouGitHub/Wordapp/blob/master/data/twoSorted.csv"
filename <- tempfile()
download(url,destfile=filename)
twoSortedCSV<- read.csv("twoSorted.csv")
twoSorted <- twoSortedCSV[,2:3]
View(twoSorted)
library(downloader)
url2 <- "https://github.com/chadchouGitHub/Wordapp/blob/master/data/twoSorted.csv"
filename <- tempfile()
download(url2,destfile=filename)
twoSortedCSV<- read.csv("twoSorted.csv")
twoSorted <- twoSortedCSV[,2:3]
url3 <- "https://github.com/chadchouGitHub/Wordapp/blob/master/data/triSorted.csv"
filename <- tempfile()
download(url3,destfile=filename)
triSortedCSV<- read.csv("triSorted.csv")
triSorted <- triSortedCSV[,2:3]
rm(filename, url2, url3,twoSortedCSV,triSortCSV)
library(downloader)
url2 <- "https://github.com/chadchouGitHub/Wordapp/blob/master/data/twoSorted.csv"
filename <- tempfile()
download(url2,destfile=filename)
twoSortedCSV<- read.csv("twoSorted.csv")
twoSorted <- twoSortedCSV[,2:3]
url3 <- "https://github.com/chadchouGitHub/Wordapp/blob/master/data/triSorted.csv"
filename <- tempfile()
download(url3,destfile=filename)
triSortedCSV<- read.csv("triSorted.csv")
triSorted <- triSortedCSV[,2:3]
rm(filename, url2, url3,twoSortedCSV,triSortedCSV)
shiny::runApp('word-app2')
shiny::runApp('word-app2')
library(downloader)
url2 <- "https://github.com/chadchouGitHub/Wordapp/blob/master/data/twoSorted.csv"
filename <- tempfile()
download(url2,destfile=filename)
twoSortedCSV<- read.csv("twoSorted.csv")
twoSorted <- twoSortedCSV[,2:3]
url3 <- "https://github.com/chadchouGitHub/Wordapp/blob/master/data/triSorted.csv"
filename <- tempfile()
download(url3,destfile=filename)
triSortedCSV<- read.csv("triSorted.csv")
triSorted <- triSortedCSV[,2:3]
rm(filename, url2, url3,twoSortedCSV,triSortedCSV)
shiny::runApp('word-app2')
shiny::runApp('word-app2')
shiny::runApp('word-app2')
filename
shiny::runApp('word-app2')
library(downloader)
url2 <- "https://github.com/chadchouGitHub/Wordapp/blob/master/data/twoSorted.csv"
filename <- tempfile()
download(url2,destfile=filename)
twoSortedCSV<- read.csv("twoSorted.csv")
twoSorted <- twoSortedCSV[,2:3]
filename
shiny::runApp('word-app2')
shiny::runApp('word-app2')
shiny::runApp('word-app2')
View(twoSortedCSV)
library(RCurl)
url2 <- getURL("https://github.com/chadchouGitHub/Wordapp/blob/master/data/twoSorted.csv")
twoSortedCSV<- read.csv(text = url2)
View(twoSortedCSV)
library(RCurl)
url2 <- getURL("https://raw.githubusercontent.com/chadchouGitHub/Wordapp/master/data/twoSorted.csv")
twoSortedCSV<- read.csv(text = url2)
shiny::runApp('word-app2')
shiny::runApp('word-app2')
shiny::runApp('word-app')
shiny::runApp('word-app')
shiny::runApp('word-app')
shiny::runApp('word-app2')
runGitHub( "Wordapp", "chadchouGitHub")
library(shiny)
runGitHub( "Wordapp", "chadchouGitHub")
library(shiny)
runGitHub("Wordapp","chadchouGitHub")
library(shiny)
runGitHub("Wordapp2","chadchouGitHub")
shiny::runApp('word-app2')
shiny::runApp('word-app2')
shiny::runApp('wordappV3/WordApp3')
shiny::runApp('wordappV3/WordApp3')
library(RCurl)
url2 <- getURL("https://raw.githubusercontent.com/chadchouGitHub/WordApp3/master/data/twoSorted.csv")
twoSortedCSV<- read.csv(text = url2)
twoSorted <- twoSortedCSV[,2:3]
url3 <- getURL("https://raw.githubusercontent.com/chadchouGitHub/WordApp3/master/data/triSorted.csv")
triSortedCSV<- read.csv(text = url3)
triSorted <- triSortedCSV[,2:3]
rm(url2,url3,twoSortedCSV,triSortedCSV)
shiny::runApp('wordappV3/WordApp3')
shiny::runApp('word-app2')
shiny::runApp('word-app2')
library(shiny)
runGitHub("Wordapp","chadchouGitHub")
setwd("~/Dropbox/Scripts/genomicClass/GenomeNote/lab/course1")
library(downloader)
url <- "https://github.com/kbroman/Talk_Graphs/raw/master/R/fig3.RData"
filename <- "fig3.RData"
if (!file.exists(filename)) download(url, filename)
load(filename)
library(rafalib)
mypar2(1,2)
dat <- list(Treatment=x,Control=y)
boxplot(dat,xlab="Group",ylab="Response",xlab="Group",ylab="Response",cex=0)
stripchart(dat,vertical=TRUE,method="jitter",pch=16,add=TRUE,col=1)
boxplot(dat,xlab="Group",ylab="Response",xlab="Group",ylab="Response",log="y",cex=0)
library(downloader)
filename <- "fig8dat.csv"
url <- "https://github.com/kbroman/Talk_Graphs/raw/master/R/fig8dat.csv"
if (!file.exists(filename)) download(url, filename)
x <- read.table(filename, sep=",", header=TRUE)
plot(x[,1],x[,2],xlab="log Dose",ylab="Proportion survived",ylim=c(0,1),
type="l",lwd=2,col=1)
lines(x[,1],x[,3],lwd=2,col=2)
lines(x[,1],x[,4],lwd=2,col=3)
legend(1,0.4,c("Drug A","Drug B","Drug C"),lwd=2, col=1:3)
plot(x, y1, ylim=c(0,1), type="n", xlab="Dose", ylab="Response")
for(i in 1:3) lines(x, z[,i], col=1, lwd=1, lty=2)
for(i in 1:3) lines(x, y[,i], col=2, lwd=1, lty=2)
lines(x, ym, col=1, lwd=2)
lines(x, zm, col=2, lwd=2)
legend("bottomleft", lwd=2, col=c(1, 2), c("Control", "Treated"))
plot(x[,1],x[,2],xlab="log Dose",ylab="Proportion survived",ylim=c(0,1),
type="l",lwd=2,col=1)
lines(x[,1],x[,3],lwd=2,col=2)
lines(x[,1],x[,4],lwd=2,col=3)
legend(1,0.4,c("Drug A","Drug B","Drug C"),lwd=2, col=1:3)
heights <- cbind(rnorm(8,73,3),rnorm(8,73,3),rnorm(8,80,3),
rnorm(8,78,3),rnorm(8,78,3))
colnames(heights)<-c("SG","PG","C","PF","SF")
rownames(heights)<- paste("team",1:8)
heights
round(heights,1)
library(dplyr)
library(downloader)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/msleep_ggplot2.csv"
filename <- "msleep_ggplot2.csv"
if (!file.exists(filename)) download(url,filename)
msleep <- read.csv("msleep_ggplot2.csv")
head(msleep)
sleepData <- select(msleep, name, sleep_total) # by columns name
selectNoName<- select(msleep, -name) # select all columns but "name" column with "-" operator
selectFromNameToOrder<- select(msleep, name:order)# select from name column to order column with ":" operator.
msleepOver16<- filter(msleep, sleep_total >= 16)
msleep %>% arrange(order) %>% head
head(arrange(msleep, order))
msleep %>%
select(name, order, sleep_total) %>%
arrange(order, sleep_total) %>%
head
head(arrange(select(msleep,name, order, sleep_total),order, sleep_total))
msleep %>%
select(name, order, sleep_total) %>%
arrange(order, sleep_total) %>%
filter(sleep_total >= 16)
filter(arrange(select(msleep,name, order, sleep_total),order, sleep_total),sleep_total >= 16)
msleep %>%
select(name, order, sleep_total) %>%
arrange(order, desc(sleep_total)) %>%
filter(sleep_total >= 16)
msleep %>%
mutate(rem_proportion = sleep_rem / sleep_total) %>% #column name is "rem_proportion"
head
msleep %>%
mutate(rem_proportion = sleep_rem / sleep_total,
bodywt_grams = bodywt * 1000) %>%
head
msleep %>%
group_by(order) %>%
summarise(avg_sleep = mean(sleep_total),
min_sleep = min(sleep_total),
max_sleep = max(sleep_total),
total = n())
test <- group_by(msleep,order)
head(test)
View(test)
?group_by()
head(test)
msleep %>%
group_by(order) %>%
summarise(avg_sleep = mean(sleep_total),
min_sleep = min(sleep_total),
max_sleep = max(sleep_total),
total = n())
set.seed(1)
x=c(rnorm(100,0,1)) ##real distribution
x[23] <- 100 ##mistake made in 23th measurement
boxplot(x)
mean(x)
sd(x)
MAD(x)
mad(x)
set.seed(1)
x=c(rnorm(100,0,1)) ##real distribution
x[23] <- 100 ##mistake made in 23th measurement
y=c(rnorm(100,0,1)) ##real distribution
y[23] <- 84 ##similar mistake made in 23th measurement
library(rafalib)
mypar(1,1)
plot(x,y,main=paste0("correlation=",round(cor(x,y),3)),pch=21,bg=1,xlim=c(-3,100),ylim=c(-3,100))
abline(0,1)
set.seed(1)
x1=c(rnorm(100,0,1)) ##real distribution
y1=c(rnorm(100,0,1)) ##real distribution
library(rafalib)
mypar(1,1)
plot(x1,y1,main=paste0("correlation=",round(cor(x1,y1),3)),pch=21,bg=1,xlim=c(-3,100),ylim=c(-3,100))
abline(0,1)
mypar(1,2)
plot(x,y,main=paste0("correlation=",round(cor(x,y),3)),pch=21,bg=1,xlim=c(-3,100),ylim=c(-3,100))
plot(rank(x),rank(y),main=paste0("correlation=",round(cor(x,y,method="spearman"),3)),pch=21,bg=1,xlim=c(-3,100),ylim=c(-3,100))
abline(0,1)
set.seed(1)
x1=c(rnorm(100,0,1)) ##real distribution
y1=c(rnorm(100,0,1)) ##real distribution
library(rafalib)
mypar(1,1)
plot(x1,y1,main=paste0("correlation=",round(cor(x1,y1),3)),pch=21,bg=1,xlim=c(-3,100),ylim=c(-3,100))
abline(0,1)
set.seed(1)
x1=c(rnorm(100,0,1)) ##real distribution
y1=c(rnorm(100,0,1)) ##real distribution
library(rafalib)
mypar(1,1)
plot(x1,y1,main=paste0("correlation=",round(cor(x1,y1),3)),pch=21,bg=1,xlim=c(-3,1),ylim=c(-3,1))
abline(0,1)
set.seed(1)
x1=c(rnorm(100,0,1)) ##real distribution
y1=c(rnorm(100,0,1)) ##real distribution
library(rafalib)
mypar(1,1)
plot(x1,y1,main=paste0("correlation=",round(cor(x1,y1),3)),pch=21,bg=1,xlim=c(-3,3),ylim=c(-3,3))
abline(0,1)
hist(ratios)
x <- 2^(-5:5) ##this 1/32,1/16,1/8,...,1,2,...,32
mypar2(1,2)
plot(x)
abline(h=1)
plot(log2(x))
abline(h=0)
x=2^seq(1,5)
y=c(rev(1/x),1,x)
Names=c(paste0("1/",rev(x)),1,x)
mypar(1,1)
plot(seq(along=y),y,xlab="",ylab="",type="n",xaxt="n")
text(seq(along=y),y,Names,cex=1.5)
abline(h=1)
plot(seq(along=y),y,xlab="",ylab="",type="n",log="y",xaxt="n")
text(seq(along=y),y,Names,cex=1.5)
abline(h=1)
set.seed(779) ##for illustration
N=25
x<- rnorm(N,0,1)
y<- rnorm(N,0,1)
x[1]<-5;x[2]<-7
cat("t-test pval:",t.test(x,y)$p.value)
set.seed(779) ##for illustration
N=25
x<- rnorm(N,0,1)
y<- rnorm(N,0,1)
cat("t-test pval:",t.test(x,y)$p.value)
set.seed(779) ##for illustration
N=25
x<- rnorm(N,0,1)
y<- rnorm(N,0,1)
x[1]<-5;x[2]<-7
cat("t-test pval:",t.test(x,y)$p.value)
cat("Wilcox test pval:",wilcox.test(x,y)$p.value)
set.seed(779) ##for illustration
N=25
x<- rnorm(N,0,1)
y<- rnorm(N,0,1)
cat("t-test pval:",t.test(x,y)$p.value)
cat("Wilcox test pval:",wilcox.test(x,y)$p.value)
stripchart(list(x,y),vertical=TRUE,ylim=c(-7,7),ylab="Observations",pch=21,bg=1,cex=1.25)
abline(h=0)
set.seed(779) ##for illustration
N=25
x<- rnorm(N,0,1)
y<- rnorm(N,0,1)
x[1]<-5;x[2]<-7
stripchart(list(x,y),vertical=TRUE,ylim=c(-7,7),ylab="Observations",pch=21,bg=1,cex=1.25)
abline(h=0)
xrank<-rank(c(x,y))[seq(along=x)]
yrank<-rank(c(x,y))[-seq(along=y)]
stripchart(list(xrank,yrank),vertical=TRUE,ylab="Ranks",pch=21,bg=1,cex=1.25)
ws <- sapply(x,function(z) rank(c(z,y))[1]-1)
text(rep(1.05,length(ws)),xrank,ws)
W <-sum(ws)
n1<-length(x);n2<-length(y)
Z <- (mean(ws)-n2/2)/ sqrt(n2*(n1+n2+1)/12/n1)
print(Z)
