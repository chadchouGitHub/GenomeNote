lines( c(5,28), c(i,i),col=color)
}
B <- 100
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(28,5), c(i,i),col=color)
}
B <- 100
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(2,5), c(i,i),col=color)
}
B <- 100
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(22,25), c(i,i),col=color)
}
B <- 100
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(22:25), c(i,i),col=color)
}
B <- 100
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(2,13,24,35), c(i,2,13,35),col=color) ## lines() is draw a line between points
}
B <- 100
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(35,13,24,3), c(i,2,13,35),col=color) ## lines() is draw a line between points
}
B <- 10
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(35,13,24,3), c(i,2,13,35),col=color) ## lines() is draw a line between points
}
B <- 1
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(35,13,24,3), c(i,2,13,35),col=color) ## lines() is draw a line between points
}
B <- 1
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(30,13,24,3), c(i,2,13,30),col=color) ## lines() is draw a line between points
}
B <- 1
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(30,18,24,3), c(i,i,13,30),col=color) ## lines() is draw a line between points
}
B <- 1
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(30,18,24,1.4), c(i,i,1.3,30),col=color) ## lines() is draw a line between points
}
B <- 1
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(30,18,24,30), c(i,i,1.3,1.4),col=color) ## lines() is draw a line between points
}
B <- 100
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(30,18,24,30), c(i,i,1.3,i),col=color) ## lines() is draw a line between points
}
library(rafalib)
B <- 10
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( c(30,18,24,30), c(i,i,1.3,i),col=color) ## lines() is draw a line between points
}
B <- 10
mypar2(1,1)
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for(i in 1:B){
hf <- sample(chowPopulation,N)
se=sd(hf)/sqrt(N)
interval <- c(mean(hf)-Q*se, mean(hf)+Q*se )
## covered is logical vector to check the interval with real mean. to see if real mean
## cover within interval.
covered<-mean(chowPopulation)<= interval[2] & mean(chowPopulation)>=interval[1]
print (covered) ## this line I use to see what the covered have in the value.
color <- ifelse(covered,1,2) # use ifelse() to decide the color value 1 for ture
## 2 for false
print(color) ## this I use to see waht is the color value "1" or "2"
lines( interval, c(i,i),col=color) ## lines() is draw a line between points
}
library(rafalib)
mypar2()
library(GSE5859Subset)
data(GSE5859Subset) ##this loads the three tables
dim(geneExpression)
head(sampleInfo)
sampleInfo$group
head(geneExpression)
match(sampleInfo$filename,colnames(geneExpression))
head(geneExpressio)
head(geneExpression)
?match
match(sampleInfo$filename,colnames(geneExpression))
colnames(geneExpression)
sampleInfo$filename
dim(geneAnnotation)
head(geneAnnotation)
head(match(geneAnnotation$PROBEID,rownames(geneExpression)))
geneAnnotation$PROBEID
rownames(geneExpression)
library(rafalib)
library(GSE5859Subset)
g <- sampleInfo$group
g
e <- geneExpression[25,]
e
e1<- geneExpression[1,]
e1
head(geneExpression)
e1<- geneExpression[25,1]
e1
e<- geneExpression[25,]
e[g==1]
?qqnorm
mypar2(1,2)
qqnorm(e[g==1])
qqline(e[g==1])
qqnorm(e[g==0])
qqline(e[g==0])
t.test(e[g==1],e[g==0])
?apply
myttest <- function(x) t.test(x[g==1],x[g==0],var.equal=TRUE)$p.value
pvals <- apply(geneExpression,1,myttest)
sum(pvals<0.05)
source("http://www.bioconductor.org/biocLite.R")
biocLite("genefilter")
set.seed(1)
m <- nrow(geneExpression)
n <- ncol(geneExpression)
randomData <- matrix(rnorm(n*m),m,n)
randomData
nullpvals <- apply(randomData,1,myttest)
sum(nullpvals<0.05)
sum(pvals<0.05)
rnorm(n*m)
?rnorm
library(genefilter)
results <- rowttests(geneExpression,factor(g))
max(abs(pvals-results$p))
triWx
triWx <- c("I am your")
triWx
splitTriWx <- split(triWx)
?split
splitTriWx <- strsplit(triWx, split, fixed=FALSE)
triWx <-as.string(c("I am your"))
triWx
triWx <-"I am your"
triWx
splitTriWx <- strsplit(triWx, split, fixed=FALSE)
splitTriWx <- strsplit(triWx, " ")
splitTriWx
splitTriWx[-1]
splitTriWx[length(splitTriWx)]
splitTrixWx[3]
splitTriWx[3]
splitTriWx[[3]]
splitTriWx
triWx <-c("I am your")
triWx
splitTriWx <- strsplit(triWx, " ")
splitTriWx
splitTriWx <- ulist(strsplit(triWx, " "))
splitTriWx <- unlist(strsplit(triWx, " "))
splitTriWx
splitTriWx[length(splitTriWx)]
triWx <-c("I am your father")
triWx
splitTriWx <- unlist(strsplit(triWx, " "))
splitTriWx[length(splitTriWx)]
lastWordF <- function(x){
splitTriWx <- unlist(strsplit(x, " "))
y<- splitTriWx[length(splitTriWx)]
return(y)
}
triWx <-c("I am your father")
triWx
lastWordF(triWx)
library(shiny)
runExample("03_reactivity")
runExample("04_mpg")
runExample("05_sliders")
runExample("06_tabsets")
runExample("07_widgets")
runExample("08_html")
runExample("09_upload")
runExample("10_download")
runExample("11_timer")
shiny::runApp('word-app')
- This Shiny App will take a input text and give out a word.
shiny::runApp('word-app')
shiny::runApp('word-app')
shiny::runApp('word-app')
shiny::runApp('word-app')
shiny::runApp('word-app')
runGitHub( "Wordapp", "chadchouGitHub")
shiny::runApp('word-app2')
shiny::runApp('word-app2')
View(oneSorted)
shiny::runApp('word-app2')
shiny::runApp('word-app2')
shiny::runApp('word-app2')
install.packages(c("boot", "evaluate", "gtools", "jsonlite", "manipulate", "roxygen2"))
write.csv(triSorted, file = "triSorted.csv")
write.csv(twoSorted, file = "twoSorted.csv")
github.download = function(url) {
fname <- tempfile()
system(sprintf("curl -3 %s > %s", url, fname))
return(fname)
}
con2 <- url("https://github.com/chadchouGitHub/Wordapp/blob/master/data/twoSorted.csv")
twoSorted<- read.csv(github.download(con2))
library(downloader)
#con2 <- url("https://github.com/chadchouGitHub/Wordapp/blob/master/data/twoSorted.csv")
url <- "https://github.com/chadchouGitHub/Wordapp/blob/master/data/twoSorted.csv"
filename <- tempfile()
download(url,destfile=filename)
twoSorted <- read.csv("twoSorted.csv")
View(twoSorted)
library(downloader)
#con2 <- url("https://github.com/chadchouGitHub/Wordapp/blob/master/data/twoSorted.csv")
url <- "https://github.com/chadchouGitHub/Wordapp/blob/master/data/twoSorted.csv"
filename <- tempfile()
download(url,destfile=filename)
twoSortedCSV<- read.csv("twoSorted.csv")
twoSorted <- twoSortedCSV[,2:3]
View(twoSorted)
library(downloader)
url2 <- "https://github.com/chadchouGitHub/Wordapp/blob/master/data/twoSorted.csv"
filename <- tempfile()
download(url2,destfile=filename)
twoSortedCSV<- read.csv("twoSorted.csv")
twoSorted <- twoSortedCSV[,2:3]
url3 <- "https://github.com/chadchouGitHub/Wordapp/blob/master/data/triSorted.csv"
filename <- tempfile()
download(url3,destfile=filename)
triSortedCSV<- read.csv("triSorted.csv")
triSorted <- triSortedCSV[,2:3]
rm(filename, url2, url3,twoSortedCSV,triSortCSV)
library(downloader)
url2 <- "https://github.com/chadchouGitHub/Wordapp/blob/master/data/twoSorted.csv"
filename <- tempfile()
download(url2,destfile=filename)
twoSortedCSV<- read.csv("twoSorted.csv")
twoSorted <- twoSortedCSV[,2:3]
url3 <- "https://github.com/chadchouGitHub/Wordapp/blob/master/data/triSorted.csv"
filename <- tempfile()
download(url3,destfile=filename)
triSortedCSV<- read.csv("triSorted.csv")
triSorted <- triSortedCSV[,2:3]
rm(filename, url2, url3,twoSortedCSV,triSortedCSV)
shiny::runApp('word-app2')
shiny::runApp('word-app2')
library(downloader)
url2 <- "https://github.com/chadchouGitHub/Wordapp/blob/master/data/twoSorted.csv"
filename <- tempfile()
download(url2,destfile=filename)
twoSortedCSV<- read.csv("twoSorted.csv")
twoSorted <- twoSortedCSV[,2:3]
url3 <- "https://github.com/chadchouGitHub/Wordapp/blob/master/data/triSorted.csv"
filename <- tempfile()
download(url3,destfile=filename)
triSortedCSV<- read.csv("triSorted.csv")
triSorted <- triSortedCSV[,2:3]
rm(filename, url2, url3,twoSortedCSV,triSortedCSV)
shiny::runApp('word-app2')
shiny::runApp('word-app2')
shiny::runApp('word-app2')
filename
shiny::runApp('word-app2')
library(downloader)
url2 <- "https://github.com/chadchouGitHub/Wordapp/blob/master/data/twoSorted.csv"
filename <- tempfile()
download(url2,destfile=filename)
twoSortedCSV<- read.csv("twoSorted.csv")
twoSorted <- twoSortedCSV[,2:3]
filename
shiny::runApp('word-app2')
shiny::runApp('word-app2')
shiny::runApp('word-app2')
View(twoSortedCSV)
library(RCurl)
url2 <- getURL("https://github.com/chadchouGitHub/Wordapp/blob/master/data/twoSorted.csv")
twoSortedCSV<- read.csv(text = url2)
View(twoSortedCSV)
library(RCurl)
url2 <- getURL("https://raw.githubusercontent.com/chadchouGitHub/Wordapp/master/data/twoSorted.csv")
twoSortedCSV<- read.csv(text = url2)
shiny::runApp('word-app2')
shiny::runApp('word-app2')
shiny::runApp('word-app')
shiny::runApp('word-app')
shiny::runApp('word-app')
shiny::runApp('word-app2')
runGitHub( "Wordapp", "chadchouGitHub")
library(shiny)
runGitHub( "Wordapp", "chadchouGitHub")
library(shiny)
runGitHub("Wordapp","chadchouGitHub")
library(shiny)
runGitHub("Wordapp2","chadchouGitHub")
shiny::runApp('word-app2')
shiny::runApp('word-app2')
shiny::runApp('wordappV3/WordApp3')
shiny::runApp('wordappV3/WordApp3')
library(RCurl)
url2 <- getURL("https://raw.githubusercontent.com/chadchouGitHub/WordApp3/master/data/twoSorted.csv")
twoSortedCSV<- read.csv(text = url2)
twoSorted <- twoSortedCSV[,2:3]
url3 <- getURL("https://raw.githubusercontent.com/chadchouGitHub/WordApp3/master/data/triSorted.csv")
triSortedCSV<- read.csv(text = url3)
triSorted <- triSortedCSV[,2:3]
rm(url2,url3,twoSortedCSV,triSortedCSV)
shiny::runApp('wordappV3/WordApp3')
shiny::runApp('word-app2')
shiny::runApp('word-app2')
library(shiny)
runGitHub("Wordapp","chadchouGitHub")
setwd("~/Dropbox/Scripts/genomicClass/GenomeNote/lab/untitled folder")
